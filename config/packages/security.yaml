security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users_in_memory: { memory: null }
    users_in_database:
      entity:
        class: App\Entity\Client # Utiliser l'entit√© Client
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    main:
      lazy: true
      provider: users_in_database
      form_login:
        login_path: app_login
        check_path: app_login
        default_target_path: app_home_page
      logout:
        path: app_logout
        target: app_login
      custom_authenticator: App\Security\SecurityControllerAuthenticator

      remember_me:
        secret: '%kernel.secret%'
        lifetime: 604800
        path: /
        always_remember_me: true

  role_hierarchy:
    ROLE_ADMIN: ROLE_USER
    ROLE_SUPER_ADMIN: ROLE_ADMIN

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/user, roles: ROLE_USER }
    - { path: ^/banned, roles: ROLE_BANNED }
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

when@test:
  security:
    password_hashers:
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
